/* CSSとはhtmlで書いた内容を装飾すること*/

/* ブラウザの初期設定値をリッセットする*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* ！！注意点！！！！　class名前. class無し　ピリオドつけない　タイピングミス！！！！！！！！！！！*/

/* 記載例-------------------------------------------------------------------------------------　*/
/* 基本ほ書き方 */
p {
  color: red;
}

/* id  頭に#　*/
#word-red {
  color:red;
}

/* class 頭に.　*/
.word-red {
  color: red;
}

/* 両方の要素に適用　*/
h1,h2 {
  color: red;
}

/* header-class内にあるh1　*/
.header h1 {
  color: red;
}
/* social-class内にあるi iはクラス名ではないこと　*/
.social i {
  color:red
}
/* header要素直下にあるh1　*/
header > h1 {
  color: red;
}

/* id名のh1要素に適用　*/
h1 #word-red {
  color: red;
}

メディアクエリ　※レスポンシブ対応　※これを記載する時はCSSの一番下に記載すること。
/* 全ての画面サイズで適用される設定　*/
.change {
  color: red;
  }
/* タブレット横置きサイズ（1024px）以下の際に適用される設定　*/
  @media screen and (max-width:1024px) {
    .change {
      color: green;
    }
  }
/* タブレット縦置きサイズ（768px）以下の際に適用される設定　*/
  @media screen and (max-width:768px) {
    .change {
      color: blue;
    }
  }
/* スマートフォンサイズ（425px）以下の際に適用される設定　*/
  @media screen and (max-width:425px) {
    .change {
      color: yellow;
    }
  }

/* 記載例-------------------------------------------------------------------------------------　　*/



/* プロパティ-------------------------------------------------------------------------------------　　*/
　コンテンツ内
　/* width:autoは親要素と同じ幅になる height:autoは子要素（中身の文字等）と同じ高さになる 初期値はauto */
  width:auto;/* paddingとborderまで含まれる*/
  width:100%;/* 要素枠までpaddingからは含まれない*/
  width: px % auto;/* 横幅　何も指定しないと親要素と同じ幅となる、親ないといっぱいに広がる*/
  max-width: 100px;/* 100px以上大きくならない。max使用時に縦横比崩れる場合ある。その場合、width100px,max-width100% height:auto*/
  height:auto; /* 要素の文字や画像の分だけの高さとなる*/
  height: px auto;/* 高さ　何も指定しないと子要素と同じ幅となる、子ないと0になる %は基本使わない。使う場合は親要素にheight指定しないときかない*/
  line-height: 40px; /* 上下の中央揃えの場合；親の高さ300pxなら300pxにすると中央になる。1.5：フォントサイズが10pxの場合15px　*/
  text-align: center; /* 水平方向の配置　left center right エクセルの文字揃えるのと同じ*/

  /* ※ 縦横中心揃え　※*/
  text-align: center;
  height: 100px;
  line-height: 100px;
}
  background-color: red;/* 背景色　*/
  background-color: rgba(0,0,0,0.3);
  background-img: url(画像のパス); /* 指定無しだと本来の画像の大きさのまま表示される　*/
  background-size: auto：自動 contain:縦横比維持埋め尽くす　cover:縦横維持で覆う 100% 100%:縦横比無視　　24px auto:px指定して表示
  background-position: top right bottom left center; /* px、％とかでも指定可能 */
  color: red;/* 文字色　*/
  font-size: 0; /* 文字サイズ　2.5em:2.5倍*/
  font-family: YuMincho; /* 字体　*/
  list-style: none; /*  行頭のスタイル　none:無し　disc:黒丸　lower-roman:小文字ローマ数字　*/
  border-radius: px; /* 50％：円　3px：角を少し丸くする　*/

  ポジション　要素移動の起点が変わる。
  position: absolute; /* absolute:ウィンドウの左上を基準にする。*/ absolute:絶対的
  ※起点を親要素の左上にする場合、親要素にrelative子要素にabsoluteかける。
  position: relative; /* relative:元々配置される予定だった場所を基準として　*/ relative:相対的
  position: fixed; /* fixed:スクロールしても固定されるtop:0 */
  top: 10px; /* top bottom left right*/
  left: 0;
  ※ポジションについての説明下記
  https://www.itra.co.jp/webmedia/what-is-position.html


  擬似クラス　選んだ箇所に指示出せるようにする
  .クラス:nth-child(　) /* ()n内に入れる　even：偶数　odd：奇数　2：二番目　3n:3つおき*/
  .クラス:first-child /* 最初の　*/
  .クラス:last-child /* 最後の　*/
  .クラス:nth-last-child(-n+3) /* 最後から3つの要素　*/
  .クラス:hover /* リンクにカーソルが乗っている状態　*/
  .クラス:active /* リンクをクリックしている状態　*/

  /* 最初、5番、最後のカラーチェンジ　*/
  .box:first-child,.box:nth-child(5),.box:last-child {
  background-color: orange;
  }
  /* 3つおきにmargin-right0*/
  .box:nth-child(3n) {
    margin-right: 0;
  }
  /* 最後から3つのmargin-bottom0*/
  .box:nth-last-child(-n + 3) {
    margin-bottom: 0;
  }


  コンテンツ周り枠 ※分からなくなった場合、ボックス二つ作って試すとわかりやすい。また、
  margin padding設定後に、画面がずれている場合あるので、一番上と左にスクロールできてるか確認する。
  (padding-top right bottom left)
　@@@@@@: 上下　左右；　　；上　左右　下；　　；上　右　下　左；時計回り　
　padding: px % auto;/* borderより内側の余白　背景色適用される　ボーダーの内側に空間作りたい時　*/
  /* 子要素を真ん中に持っていくこともできる。親width,height200pxならpaddingを50px 4分の1*/
　border: 5px solid（double,dashed：破線,dotted：点線) yellow;/* paddingの外周　太さ、線種類、色　*/
　margin: px % auto;/* borerより外側の余白　背景色適用されない　隣接ボックスとの間に空間作りたい時　*/


　枠の配置(flexbox)　子要素の並び変更したい時に、親要素に指定する。
　親要素の親はbodyになるため、flexbox使うと全てがflex指定されてしまう。要素自身だけを中央に揃えたい場合はmargin
　margin: 0 auto; /* 要素自身だけの中央揃え　左右に余白がないとできない　*/
　display: flex;/* アイテムの横並び　inline：平に横並び inline-block：IとBの中間 block:横いっぱい、縦並び*/
　justify-content: center; /* 横方向の整列方法　center:中央寄せ  start:左寄せ　space-between均等*/
  ※二つ同時にかける場合のmargin 0 autoとjustify-contentの違いはmarginは外枠自体の中心揃えでjustify-contentは枠内にあるボックス等の中心揃え
  チャプター5のエクササイズで12個ボックスを作るところを、9個だけ作ってかけてみるとわかりやすい。

　align-items: stretch flex-start flex-end center baseline;/* 縦方向の整列方法*/
　align-content: stretch; /* 複数行になった際の整列方法*/
　flex-wrap: wrap;/* nowrap:折り返さない wrap:はみ出たら折り返し */
　flex-derection: row横 row-reverse column縦 column-reverse;/* 並ぶ方向*/
　flex-grow: 1; /* 横幅の余白の伸びる比率　*/
　flex-shrink: 1; /* 横幅の余白の縮む比率　*/
　flex-basis: 100px; /* 横幅の指定　widthとの違いは縦並びになった時に自動で高さの設定に切り替わる。*/
　.flex > div:nth-child(1) {
  order: 3; }/* order:3番目のdivが1番目に */
  .flex > div:nth-child(2) {
  align-self: flex-start; }/* 縦方向の位置をアイテム毎に指定　*/

  display: inline-block; /*  flex無しで横並び　width height指定不可　※要素間に不要な隙間できるため、親要素のfont-sizeを0にする。*/
  margin: 0 auto; /* ※width指定しないと効かない！何も指定しないと親要素の100％の大きさとなっている為、動かせない。動く幅がない。*/

  /* よく使うコマンド　最初のブロックだけ左であとは右並び*/
  .flex {
    display:flex;
    justify-content: flex-end;
  }
　.flex >:first-child{
  margin-right: auto;
  }
  ※マージンライトなのにレフトに動く理由※
  マージンとは、要素にスペースを追加するプロパティです。margin-left: 50px;を定義すると、要素の左側に50pxのスペースが追加されます。
  これは言い換えると、要素を50px右にプッシュするのと同じことです。margin-left: auto;を定義すると、autoは使用可能なスペースを計算し、
  要素の左側のスペース量を算出します。これにより、要素を右いっぱいにプッシュします。


  /* よく使うコマンド　縦横中央揃え*/
  .flex {
    display:flex;
    justify-content: center;
    align-items: center;
  }

 /* よく使うコマンド　最後のmargin打ち消し　打ち消さないと　ずれる*/
  .step-box {
    width: 300px;
    margin-right: 30px;
    padding: 10px;
    position: relative;
    background-color: #eee;
  }
  .step-box:last-child {
    margin-right: 0;
  }

/* 画像の貼り付け　*/
  .step-img1 {
    height: 150px;
    background-image: url(img/flow01.png);
    background-position: bottom;
    background-size: cover;
  }

/* プロパティ-------------------------------------------------------------------------------------　　*/